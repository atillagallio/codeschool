"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

import codeschool.filters
import codeschool.fixes.djinja

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'nc$k(5vumq+%5lk52s@ob$h1x3!bkuzwbpl4e+&fgbdj(ms)20'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    # Codeschool apps
    'codeschool.questions.coding_io',
    'codeschool.questions.form',
    'codeschool.questions',
    'codeschool.lms.activities',
    'codeschool.lms.gamification',
    'codeschool.core',
    'codeschool.auth.apps.AuthConfig',

    # Related apps
    'model_reference',
    'srvice',

    # Wagtail and dependencies
    # 'commonblocks',
    # 'overextends',
    # 'osm_field',
    # 'wagtailosm',
    # 'wagtailgmaps',
    'codeschool.vendor.wagtailmarkdown',
    # 'wagtailfontawesome',
    # 'wagtailembedder',
    # 'wagtail.contrib.wagtailapi',
    'wagtail.contrib.wagtailroutablepage',
    'wagtail.contrib.settings',
    'wagtail.contrib.modeladmin',
    'wagtail.contrib.table_block',
    'wagtail.wagtailforms',
    'wagtail.wagtailredirects',
    'wagtail.wagtailembeds',
    'wagtail.wagtailsites',
    'wagtail.wagtailusers',
    'wagtail.wagtailsnippets',
    'wagtail.wagtaildocs',
    'wagtail.wagtailimages',
    'wagtail.wagtailsearch',
    'wagtail.wagtailadmin',
    'wagtail.wagtailcore',
    'modelcluster',
    'compressor',
    'taggit',

    # 3rd party
    'annoying',
    'djinga',
    'easy_thumbnails',
    'guardian',
    'userena',
    'social.apps.django_app.default',
    'polymorphic',

    # Django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'wagtail.wagtailcore.middleware.SiteMiddleware',
    'wagtail.wagtailredirects.middleware.RedirectMiddleware',
]

ROOT_URLCONF = 'codeschool.site.urls'

TEMPLATES = [
    {
        'BACKEND': 'djinga.backends.djinga.DjingaTemplates',
        'APP_DIRS': True,
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'OPTIONS': {
            # These have no effects since we are overloading "condition"
            "jj_exts": ('jinja2', 'jinja'),
            "dj_exts": ('html', 'htm'),
            # "load_from": ("codeschool.filters",),  # wait until djinga fixes problems with python 3
            "i18n_new_style": True,
            # "condition": lambda x: (
            #    x.endswith('.jinja2') or x.endswith('jinja') or
            #    x in FORCE_JINJA_TEMPLATES),
            "trim_blocks": True,
            "lstrip_blocks": True,
            # "finalize": django_compat_finalizer,
            'autoescape': False,
            'extensions': [
                # 'codeschool.jinja.ext.DjangoComment',
                # 'codeschool.jinja.ext.DjangoLoad',
                # 'wagtail.wagtailcore.jinja2tags.core',
                # 'wagtail.wagtailadmin.jinja2tags.userbar',
                # 'wagtail.wagtailimages.jinja2tags.images',
                # 'jdj_tags.extensions.DjangoL10n',
                # 'jdj_tags.extensions.DjangoNow',  # not released yet!
                'compressor.contrib.jinja2ext.CompressorExtension',
                'djinga.ext.static',
                'djinga.ext.css',
                'djinga.ext.js',
                'djinga.ext.media',
                'djinga.ext.django',
                'djinga.ext.csrf_token',
                'djinga.ext.url',
                # 'djinga.ext.htmlcompress.HTMLCompress',  # only on deploy
                "jinja2.ext.do",
                "jinja2.ext.loopcontrols",
                "jinja2.ext.with_",
                "jinja2.ext.i18n",
                "jinja2.ext.autoescape",
            ],
            "context_processors": [
                'social.apps.django_app.context_processors.backends',
                'social.apps.django_app.context_processors.login_redirect',
                'django.template.context_processors.request',
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
                # "django.template.context_processors.debug",
                # 'wagtail.contrib.settings.context_processors.settings',
            ],
            "filters": codeschool.filters.filter_registry,
            "globals": codeschool.filters.globals_registry,

        },
    },
]

WSGI_APPLICATION = 'codeschool.site.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DB_DIR = os.path.dirname(os.path.dirname(os.path.dirname(BASE_DIR)))
DB_DIR = os.path.join(DB_DIR, 'db')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(DB_DIR, 'db.sqlite3'),
        'TEST': {
            'NAME': os.path.join(DB_DIR, 'testdb.sqlite3'),
        }

    }
}

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'pt-BR'
TIME_ZONE = 'America/Sao_Paulo'  # or maybe 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

COLLECT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(BASE_DIR)))
COLLECT_DIR = os.path.join(COLLECT_DIR, 'collect')

STATIC_ROOT = os.path.join(COLLECT_DIR, 'static')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(COLLECT_DIR, 'media')
MEDIA_URL = '/media/'

# Django compressor

COMPRESS_ENABLED = True
COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.rCSSMinFilter',
    # 'compressor.filters.cssmin.CSSCompressorFilter',
]
COMPRESS_PRECOMPILERS = [
    ('text/coffeescript', 'coffee --compile --stdio'),
    ('text/less', 'lessc {infile} {outfile}'),
    ('text/x-sass', 'sass {infile} {outfile}'),
    ('text/x-scss', 'sass --scss {infile} {outfile}'),
    ('text/stylus', 'stylus < {infile} > {outfile}'),
]

# Wagtail
# http://docs.wagtail.io/en/latest/getting_started/integrating_into_django.html

WAGTAIL_SITE_NAME = 'Codeschool'

# Authentication

AUTHENTICATION_BACKENDS = (
    #'social.backends.google.GoogleOpenId',
    'social.backends.google.GoogleOAuth2',
    'social.backends.facebook.FacebookOAuth2',
    'social.backends.twitter.TwitterOAuth',
    #'social.backends.open_id.OpenIdAuth',
    # 'social.backends.github.GithubOAuth2',
    #'social.backends.yahoo.YahooOpenId',
    'userena.backends.UserenaAuthenticationBackend',
    'guardian.backends.ObjectPermissionBackend',
    'django.contrib.auth.backends.ModelBackend',
)
ANONYMOUS_USER_ID = 1
AUTH_PROFILE_MODULE = 'cs_auth.Profile'


# Social authentication

SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/home/'
SOCIAL_AUTH_LOGIN_URL = '/'


# OAUTH keys

SOCIAL_AUTH_GITHUB_KEY = ''
SOCIAL_AUTH_GITHUB_SECRET = ''
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = ''
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = ''
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ''
SOCIAL_AUTH_FACEBOOK_KEY = '1085127354890672'
SOCIAL_AUTH_FACEBOOK_SECRET = '9f6ba5c8721172acaf25a733c4c81a99'
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_TWITTER_KEY = 'JrIVXbXZguPeUsnqcjtbQEWXH'
SOCIAL_AUTH_TWITTER_SECRET = 'vMZjdO7DsUV8mVo46smQK2SHyhCxnXyc24gxH6J6cH08anWqHA'


# Userena support

USERENA_ACTIVATION_REQUIRED = False
USERENA_SIGNIN_AFTER_SIGNUP = True
USERENA_DISABLE_PROFILE_LIST = True
USERENA_ACTIVATION_DAYS = 7
USERENA_FORBIDDEN_USERNAMES = (
    'signup', 'signout', 'signin', 'activate', 'me', 'password', 'login',
    'codeschool'
)
USERENA_USE_HTTPS = False
USERENA_REGISTER_PROFILE = False
USERENA_SIGNIN_REDIRECT_URL = '/auth/%(username)s/'
USERENA_PROFILE_LIST_TEMPLATE = 'auth/profile-list.jinja2'

LOGIN_URL = '/auth/login/'
LOGOUT_URL = '/auth/signout/'
SITE_ID = 1


# Logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '.cs-debug.log',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        }
    },
    'loggers': {
        'django': {
            'level': 'DEBUG',
            'propagate': True,
        },
        'codeschool': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# HACK! Fix refactored function reference used by django-relationships
# from django.db.models.fields.related_descriptors import create_forward_many_to_many_manager
# from django.db.models.fields import related as _related
# _related.create_many_related_manager = create_forward_many_to_many_manager