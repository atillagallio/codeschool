# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-08-06 17:51
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import wagtail.contrib.wagtailroutablepage.models
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0028_merge'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnswerKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.TextField(blank=True, help_text='Source code for the correct answer in the given programming language.', verbose_name='answer source code')),
                ('placeholder', models.TextField(blank=True, help_text='This optional field controls which code should be placed in the source code editor when a question is opened. This is useful to put boilerplate or even a full program that the student should modify. It is possible to configure a global per-language boilerplate and leave this field blank.', verbose_name='placeholder source code')),
                ('source_hash', models.CharField(blank=True, help_text='Hash computed from the reference source', max_length=32)),
                ('iospec_hash', models.CharField(blank=True, help_text='Hash computed from reference source and iospec_size.', max_length=32)),
                ('iospec_source', models.TextField(blank=True, help_text='Iospec source for the expanded testcase. This data is computed from the reference iospec source and the given reference program to expand the outputs from the given inputs.', verbose_name='expanded source')),
            ],
            options={
                'verbose_name': 'answer key',
                'verbose_name_plural': 'answer keys',
            },
        ),
        migrations.CreateModel(
            name='CodingIoQuestion',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('short_description', models.CharField(help_text='A short textual description to be used in titles, lists, etc.', max_length=140, verbose_name='short description')),
                ('author_name', models.CharField(blank=True, help_text="The author's name, if not the same user as the question owner.", max_length=100, verbose_name="Author's name")),
                ('score_value', models.IntegerField(help_text='The score this function is worth in Codeschool generic ranking system. This score is used in the site leaderboard and solely as a motivation for students to engage in activities. The default score is 100 per activity.', verbose_name='maximum score')),
                ('points_value', models.IntegerField(help_text='Points are awarded in specific contexts (e.g., associated with a quiz or in a list of activities) and can be used to compute grades in a flexible way.', verbose_name='value')),
                ('stars_value', models.FloatField(default=0.0, help_text='Number of stars the activity is worth (fractional stars are accepted). Stars are optional bonus points for special accomplishments that can be used to trade "special powers" in codeschool.', verbose_name='stars')),
                ('difficulty', models.IntegerField(choices=[(0, 'Trivial'), (1, 'Very Easy'), (2, 'Easy'), (3, 'Regular'), (4, 'Hard'), (5, 'Very Hard'), (6, 'Challenge!')], default=2)),
                ('body', wagtail.wagtailcore.fields.StreamField((('paragraph', wagtail.wagtailcore.blocks.RichTextBlock()), ('heading', wagtail.wagtailcore.blocks.CharBlock(classname='full title')), ('markdown', wagtail.wagtailcore.blocks.CharBlock(classname='markdown'))), blank=True, help_text='Describe what the question is asking and how should the students answer it as clearly as possible. Good questions should not be ambiguous.', null=True, verbose_name='Question description')),
                ('comments', wagtail.wagtailcore.fields.RichTextField(blank=True, help_text='(Optional) Any private information that you want to associate to the question page.', verbose_name='Comments')),
                ('import_object_from', models.FileField(blank=True, help_text='Fill missing fields from question file. You can safely leave this blank and manually insert all question fields.', null=True, upload_to='question-imports', verbose_name='import question')),
                ('iospec_size', models.PositiveIntegerField(default=10, help_text='The desired number of test cases that will be computed after comparing the iospec template with the answer key. This is only a suggested value and will only be applied if the response template uses input commands to generate random input.', verbose_name='number of iospec template expansions')),
                ('iospec_source', models.TextField(help_text='Template used to grade I/O responses. See http://pythonhosted.org/iospec for a complete reference on the template format.', verbose_name='response template')),
                ('iospec_hash', models.CharField(blank=True, help_text='A hash to keep track of iospec updates.', max_length=32)),
                ('timeout', models.FloatField(blank=True, default=1.0, help_text='Defines the maximum runtime the grader will spend evaluating each test case.', verbose_name='timeout in seconds')),
            ],
            options={
                'verbose_name': 'Programming question (IO-based)',
                'verbose_name_plural': 'Programming questions (IO-based)',
            },
            bases=(wagtail.contrib.wagtailroutablepage.models.RoutablePageMixin, 'wagtailcore.page', models.Model),
        ),
    ]
