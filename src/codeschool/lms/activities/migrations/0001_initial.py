# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-08-06 17:51
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import jsonfield.fields
import model_utils.fields
import modelcluster.fields
import wagtail_model_tools.models.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0029_auto_20160724_1351'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityList',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('short_description', models.CharField(help_text='A short textual description to be used in titles, lists, etc.', max_length=140, verbose_name='short description')),
            ],
            options={
                'verbose_name': 'list of activities',
                'verbose_name_plural': 'lists of activities',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='ActivitySection',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('short_description', models.CharField(help_text='A short textual description to be used in titles, lists, etc.', max_length=140, verbose_name='short description')),
                ('material_icon', models.CharField(default='help', max_length=20, verbose_name='Optional icon')),
            ],
            options={
                'verbose_name': 'section',
                'verbose_name_plural': 'sections',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('opened', 'opened'), ('closed', 'closed')], default='opened', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('grade', models.DecimalField(blank=True, decimal_places=3, default=0, help_text='Grade given to response considering all submissions, penalties, etc.', max_digits=6, null=True, verbose_name='given grade')),
                ('finish_time', models.DateTimeField(blank=True, null=True)),
                ('given_points', models.IntegerField(default=0)),
                ('given_score', models.IntegerField(default=0)),
                ('given_stars', models.FloatField(default=0.0)),
                ('activity_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='wagtailcore.Page')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_activities.response_set+', to='contenttypes.ContentType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'final response',
                'verbose_name_plural': 'final responses',
            },
            bases=(wagtail_model_tools.models.mixins.CopyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('pending', 'pending'), ('incomplete', 'incomplete'), ('waiting', 'waiting'), ('invalid', 'invalid'), ('done', 'done')], default='pending', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('response_data', jsonfield.fields.JSONField(blank=True, null=True)),
                ('response_hash', models.CharField(blank=True, max_length=32)),
                ('feedback_data', jsonfield.fields.JSONField(blank=True, null=True)),
                ('given_grade', models.DecimalField(blank=True, decimal_places=3, help_text='This grade is given by the auto-grader and represents the grade for the response before accounting for any bonuses or penalties.', max_digits=6, null=True, verbose_name='Percentage of maximum grade')),
                ('final_grade', models.DecimalField(blank=True, decimal_places=3, help_text="Similar to given_grade, but can account for additional factors such as delay penalties or for any other reason the teacher may want to override the student's grade.", max_digits=6, null=True, verbose_name='Final grade')),
                ('manual_override', models.BooleanField(default=False)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_activities.submission_set+', to='contenttypes.ContentType')),
                ('session', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='activities.Response')),
            ],
            options={
                'verbose_name': 'submission',
                'verbose_name_plural': 'submissions',
            },
            bases=(wagtail_model_tools.models.mixins.CopyMixin, models.Model),
        ),
        migrations.AlterUniqueTogether(
            name='response',
            unique_together=set([('user', 'activity_page')]),
        ),
    ]
